#version 430 core
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 curPos;
    vec3 prePos;
    vec3 acceleration;
    vec3 velocity;
    float density;
    float pressure;
};

layout (std140, binding = 0) uniform Context {
    vec3 cameraPosition;
    vec3 cameraRight;
    vec3 cameraUp;
    vec3 cameraFront;
    vec4 cameraParams;
    vec4 screenParams;
    int particleCount;
    float deltaTime;
};

layout(std430, binding = 1) buffer Particles{
    Particle particles[];
};

#define PI 3.1415927410125732421875
#define PARTICLE_RADIUS 0.25
#define PARTICLE_MASS 65
#define SMOOTHING_LENGTH (24 * PARTICLE_RADIUS)
#define PARTICLE_STIFFNESS 200
#define PARTICLE_RESTING_DENSITY 1000
#define WALL_DAMPING 0.8f

void main(void)
{
    uint i = gl_GlobalInvocationID.x;

    if (i > particleCount)
        return;

    vec3 newVelocity = particles[i].velocity + deltaTime * particles[i].acceleration;
    vec3 newPosition = particles[i].curPos + deltaTime * newVelocity;

    if (newPosition.y < -2) {
        newPosition.y = -2;
        newVelocity.y *= -1 * WALL_DAMPING;
    }
    else if (newPosition.y > 10) {
        newPosition.y = 10;
        newVelocity.y *= -1 * WALL_DAMPING;
    }

    if (newPosition.x < -8) {
        newPosition.x = -8;
        newVelocity.x *= -1 * WALL_DAMPING;
    }
    else if (newPosition.x > 8) {
        newPosition.x = 8;
        newVelocity.x *= -1 * WALL_DAMPING;
    }
    if (newPosition.z < -10) {
        newPosition.z = -10;
        newVelocity.z *= -1 * WALL_DAMPING;
    }
    else if (newPosition.z > 4) {
        newPosition.z = 4;
        newVelocity.z *= -1 * WALL_DAMPING;
    }

    particles[i].prePos = particles[i].curPos;
    particles[i].velocity = newVelocity;
    particles[i].curPos = newPosition;
}