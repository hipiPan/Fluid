#version 430 core
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle {
    vec3 curPos;
    vec3 prePos;
    vec3 acceleration;
    vec3 velocity;
    float density;
    float pressure;
};

layout (std140, binding = 0) uniform Context {
    vec3 cameraPosition;
    vec3 cameraRight;
    vec3 cameraUp;
    vec3 cameraFront;
    vec4 cameraParams;
    vec4 screenParams;
    int particleCount;
    float deltaTime;
};

layout(std430, binding = 1) buffer Particles{
    Particle particles[];
};

#define PI 3.1415927410125732421875
#define PARTICLE_RADIUS 0.25
#define PARTICLE_MASS 65
#define SMOOTHING_LENGTH (24 * PARTICLE_RADIUS)
#define PARTICLE_STIFFNESS 200
#define PARTICLE_RESTING_DENSITY 1000 // 静态密度

void main(void)
{
    uint i = gl_GlobalInvocationID.x;

    if (i > particleCount)
        return;

    float m = PARTICLE_MASS;
    float h = SMOOTHING_LENGTH;
    float k = PARTICLE_STIFFNESS;
    float densitySum = 0.0;
    // 使用了w_poly6的光滑核函数
    for (int j = 0; j < particleCount; j++) {
        float r = length(particles[i].curPos - particles[j].curPos);
        if (r < h) {
            densitySum += m * 315.0 * pow(h * h - r * r, 3) / (64.0 * PI * pow(h, 9));
        }
    }

    particles[i].density = densitySum;
    particles[i].pressure = max(k * (densitySum - PARTICLE_RESTING_DENSITY), 0.0001);
}